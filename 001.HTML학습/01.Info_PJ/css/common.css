@charset "utf-8";
/* Info PJ 공통 클래스 - common.css */

/* 외부 CSS파일은 반드시 상단에 맨위에 문자셋 인코딩 셋팅을 해야함! 
    @charset "utf-8"은 2byte문자까지 문제없이 인코딩 해주는 형식
*/


/* 스타일시트 코딩구역 : 인터널방식 */
/* 스타일 시트를 사용하는 영역  */
/* css문법만 쓸 수 있다 */
/***************************************************
            기본 사용법 : 
            ______________________

            선택자{
                속성명: 값;
            }
            ______________________

            - 선택자 : 태그명, 아이디명, 클래스명 등
            - 속성명 : 각 요소를 구성하는 상세속성들
            - 값 : 각 속성에서 사용할 수 있는 값들

            ______________________________________________
            
            [ CSS 선택자(selector) ]
            1. 타입선택자 : 요소명 (예:h1/a/p/div 등)
            2. 자손선택자 : 띄어쓰기 (예: h1 a)
            3. 아이디 선택자 : # (예: #my)
            4. 클래스 선택자 : . (예: .ct)
            5. 종속 선택자 : 태그명+아이디/클래스명 (예: header#top, main.ct) 
            -> 종속 선택자를 쓰는 이유 : 
               1) 이름을 쓴 요소를 밝혀서 코딩함
               2) 같은 이름의 클래스를 다양하게 쓸 때
               -> ht.ct / div.ct  클래스 이름은 같지만 태그명이 다르기 때문에 다르게 코딩함 
            6. 직계자식선택자 : > (예: div > a)
            7. 그룹선택자 : , (예: p, div)
            8. 형제선택자 : + (예: a + a)
            9. 다중형제선택자 : ~(틸트) (예: li:nth-child(4) ~ li) -> 4번째 li를 포함하여 뒤쪽 li형제 모두 선택
            10. 속성선택자 : [] (예: a[href=#]) 
            ____________________________________________________________________________

            [ 요소의 박스모델 ]
            - 박스의 구성요소는?
            1. 가로크기 : width
            2. 세로크기 : height
            3. 경계선 : border
            4. 안쪽여백 : padding
            5. 바깥여백 : margin

            -> 참고사이트: https://www.w3schools.com/css/css_boxmodel.asp


        **************************************************/

/* 공통클래스 - 같은 디자인을 가지는 요소에 같은 이름을 준다 */

/* 중앙배치 클래스 */
.ct {
    width: 760px;
    border: 1px solid silver;
    padding: 10px;
    margin: 0 auto;
    /* 블록박스 중앙정렬
            양쪽바깥여백을 auto로 주면 양쪽여백을
            등분할 하기 때문에 박스가 가운데 위치함*/

    /* 블록요소 내부의 텍스트/인라인요소 중앙정렬 */
    text-align: center;
}

/* [ 마진값 설정하기 ]
            margin: 값; (4방향)
            margin: 값 값; (위아래 양쪽)
            margin: 값 값 값; (위 양쪽 아래)
            margin: 값 값 값 값; (위 오른 아래 왼 -> 시계방향!) 
                
            ->>> padding도 위와 같음!!!

            개별설정은
            margin-top, margin-bottom,
            margin-left, margin-right
           
            ->>> padding도 위와 같음!!!
        */

/* 다중클래스 적용연습  */
/* 글자색, 글자그림자 클래스 */
.fc {
    color: skyblue;
    text-shadow: 1px 1px 1px #000;
}

/* 글자 밑줄 클래스 */
.fd {
    text-decoration: underline;
    text-decoration-style: dotted;
}


/* 1. 상단영역 */
header#top

/* 기존 .ct에 설정된 마진값 보다 우선적용을 위해 아이디로 설정함 */
    {
    /* 배경색 - background-color */
    background-color: #32ad13;
    /* 해시코드 */

    /* 하단마진 : margin-bottom */
    margin-bottom: 20px;
}

/* 1-1. 제목 */
#top h1 {
    /* 글자색 */
    color: white;
    /* 글자 그림자 : text-shadow  */
    text-shadow: 2px 2px 4px #555;
    /* text-shadow: x축 y축 블러 색; */
}

/* 1-2. 메뉴 */
.gnb {
    color: gray;
}

.gnb a {
    color: white;
    /* 밑줄 변경: 기본값 - underline
                text-decoration 속성
                - underline 밑줄
                - overline 윗줄
                - linethrough 가운데줄
                - none 없음
            */
    text-decoration: none;
    /* 글자 굵기: font-weight\
                속성
                - normal 두께 없앰
                - bold 두껍게
                (아래 3가지는 기본적으로 글자체가 지원해야함)
                - bolder 더 두껍게
                - lighter 얇게
                - 100 ~ 900 숫자가 커질수록 두꺼워짐 
                
            */
    font-weight: bold;
}

/* 메뉴a에 마우스 오버시 */
/* 선택자:hover  -> 마우스 오버시 가상클래스 */
/* a+a 는 첫번째 a요소를 제외한 형제a요소들만 선택됨
            -> 결과적으로 첫번째 a요소만 제외됨 */
.gnb a+a:hover {
    text-decoration: overline;
    color: rgb(0, 4, 255);
}

/* 로고이미지 */
/* .gnb a가 아닌 .gnb img로 하는 이유는 img의 a는 그냥 감싸는 태그이고 img는 실제 사용하는 태그이기 때문에 img에 vertical-align을 줘야함*/
.gnb img {
    vertical-align: bottom;
}

/* 
            vertical-align 속성
            -> 인라인요소간 진행방향 세로정렬
            -> 값은 정해진 값(top/middle/bottom/baseline) 또는 수치값(px)
            
            참고) vertical-align:baseline이 기본값
            baseline은 이미지 하단선을 기준으로 한다는 의미
        */

/* 2. 메인영역 */
#cont {
    margin-bottom: 20px;
    /* 최소높이값 설정 : min-height
       특징: 최소높이보다 내용이 많아지면 높이가 늘어남
    */
    min-height: 500px;
    /* .ct에서 를자 중앙정렬 되어 있으므로 왼쪽정렬로 덮어써야함 */
    text-align: left;
}

/* 메인이미지 */
/* #cont img {
    width: 100% !important; */
    /* 
                [ CSS 적용 우선순위 ]
                in-line > id > class > type
                -> !important를 설정값 뒤에 쓰면 가장 우선으로 적용됨
                -> 주의사항 : !important를 남발하면 JS구현시 in-line CSS적용이 안되거나 다른변경 덮어쓰기가 안될 수 있으므로 사용에 유의

                -> 일반적으로 우선순위가 밀리는 경우
                상위부모요소를 선택하여 자손선택자 형식으로 선택하면 우선순위가 올라간다
            */
}

/* 하단주소 */
#info {
    background-color: rgb(243, 243, 243);
}

#info address {
    padding: 20px;
    font-style: normal;
    /* 
                font-style 속성
                - italic 이탤릭체
                - normal 특징없음

                참고) address요소는 이탤릭체가 기본세팅되어 있음
            */
    color: #222;
    font-size: 14px;
    /* 
                font-size 속성
                - 기본크기는 16px
            */
    line-height: 1.6;
    /* 
                line-height : 줄간격
                - 단위없이 사용하면 글자크기 기준 배수
                - px, em 등 여러가지 단위 사용가능
            */
}

/* 주소의 영문이름만 이탤리체로 변경 */
#info span {
    font-style: italic;
}